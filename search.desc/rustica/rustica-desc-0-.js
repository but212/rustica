searchState.loadedDescShard("rustica", 0, "Rustica\nImplementations of functional data types.\nConvenient re-exports of commonly used items.\nPersistent vector implementation with structural sharing.\nCreates a new <code>PersistentVector</code> with the provided elements.\nCore traits for functional programming abstractions.\nMonad transformers and related utilities.\nUtility functions and helpers for common operations.\nAsync monad for asynchronous computations.\nChoice type representing multiple alternatives.\nContinuation monad for expressing computations with …\nEither type for representing one of two possible values.\nIdentity monad implementation.\nIO monad for safely handling side effects.\nIsoLens implementation for focusing on parts of product …\nPrism implementation for focusing on particular variants …\nLens implementation for focusing on parts of product types.\nMaybe type (equivalent to Option) with additional …\nPrism implementation for focusing on particular variants …\nReader monad for computations that read from a shared …\nState monad for computations that maintain and modify …\nValidated type for accumulating multiple errors.\nWrapper types for working with semigroups and monoids.\nWriter monad for computations that produce values along …\nThe asynchronous monad, which represents a computation …\nA type alias for an asynchronous computation that can be …\nApplies a wrapped function to this async computation.\nApplies a wrapped function to this async computation, …\nChains this computation with another async computation.\nChains this computation with another async computation, …\nMaps a function over the result of this async computation.\nMaps a function over the result of this async computation, …\nReturns the argument unchanged.\nConverts an asynchronous Result into an AsyncM.\nCalls <code>U::from(self)</code>.\nCreates a new async computation from a future-producing …\nCreates a pure async computation that just returns the …\nRecovers from errors in the computation with a default …\nTries to get the value from this async computation.\nZips this AsyncM with another AsyncM, returning a tuple of …\nRuns multiple AsyncM operations in parallel and combines …\nA type representing a value with multiple alternatives.\nAdds multiple new alternatives to the <code>Choice</code>, consuming …\nGet a reference to the alternatives (all items except the …\nFilters the alternatives based on a predicate.\nReturns a <code>Choice</code> containing only the values that satisfy …\nReturns a reference to the primary value.\nFlattens a <code>Choice</code> of iterable items into a <code>Choice</code> of …\nFlattens a <code>Choice</code> of iterable items into a sorted <code>Choice</code> …\nApplies a function to all values in the <code>Choice</code>, including …\nReturns the argument unchanged.\nChecks if there are any alternatives.\nCalls <code>U::from(self)</code>.\nChecks if the <code>Choice</code> is empty (contains no values).\nReturns an iterator over all values in the <code>Choice</code>, …\nReturns an iterator over the alternative values in the …\nReturns the total number of choices, including the primary …\nCreates a new <code>Choice</code> with a single item.\nCreates a new empty <code>Choice</code>.\nCreates a new <code>Choice</code> from a primary value and an iterable …\nRemoves an alternative at the specified index and returns …\nSwaps the first value with the alternative at the …\nThe <code>Cont</code> monad represents computations in …\nType alias for a continuation function\nApplies a function contained in a continuation to the …\nMonadic bind operation for the continuation monad.\nCall with current continuation.\nMaps a function over the value inside this continuation.\nReturns the argument unchanged.\nThe state transformation function\nCalls <code>U::from(self)</code>.\nCreates a new continuation from a function.\nLifts a value into the continuation monad context.\nCreates a continuation that immediately returns the given …\nRuns this continuation with the given continuation …\nThe <code>Either</code> type represents values with two possibilities: …\nAn iterator over the right value of an <code>Either&lt;L, R&gt;</code>.\nAn iterator over a mutable reference to the right value of …\nAn iterator over a reference to the right value of an …\nAn iterator over the left value of an <code>Either&lt;L, R&gt;</code>.\nAn iterator over a mutable reference to the left value of …\nAn iterator over a reference to the left value of an …\nContains a value of type <code>L</code>\nContains a value of type <code>R</code>\nMaps a function over the left value, leaving a right value …\nMaps a function over the right value, leaving a left value …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an <code>Either</code> from a <code>Result</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a mutable reference to <code>Either</code> into an iterator …\nConverts a reference to <code>Either</code> into an iterator over a …\nConverts the <code>Either</code> into an iterator over the right value.\nReturns <code>true</code> if this is a <code>Left</code> value.\nReturns <code>true</code> if this is a <code>Right</code> value.\nCreates a new <code>Either::Left</code> containing the given value.\nReturns an iterator over the left value, consuming self.\nReturns an iterator over a mutable reference to the left …\nReturns an iterator over a reference to the left value.\nReturns a mutable reference to the <code>Left</code> value, panicking …\nReturns the contained <code>Left</code> value as an Option.\nReturns the contained <code>Left</code> value or a default.\nReturns a reference to the <code>Left</code> value.\nReturns the contained <code>Left</code> value, consuming the <code>self</code> value.\nCreates a new <code>Either::Right</code> containing the given value.\nReturns the contained <code>Right</code> value as an Option.\nReturns the contained <code>Right</code> value or a default.\nReturns a reference to the <code>Right</code> value.\nReturns the contained <code>Right</code> value, consuming the <code>self</code> …\nConverts this <code>Either</code> to a <code>Result</code>.\nExtracts the left value, panicking if this is a <code>Right</code>.\nExtracts the right value, panicking if this is a <code>Left</code>.\nThe identity monad, which represents a computation that …\nReturns the argument unchanged.\nCreates a new <code>Id</code> value from a reference.\nCalls <code>U::from(self)</code>.\nExtracts the inner value from Id\nCreates a new <code>Id</code> value wrapping the given value.\nSequences two Id operations, discarding the first result.\nReturns a mutable reference to the inner value.\nThe IO monad, which represents computations that may …\nA custom error type for IO operations\nThe IO operation failed for some other reason\nThe IO operation failed because the value hasn’t been …\nApplies a function that returns an IO to this IO operation.\nChains this IO operation with another IO operation.\nCreates a new IO operation that delays execution for a …\nCreates a new IO operation that delays execution for a …\nMaps a function over the result of this IO operation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new IO operation from a function.\nCreates a pure IO operation that just returns the given …\nRuns the IO operation and returns the result.\nTries to get the value from this IO operation.\nTries to get the value from this IO operation with context.\nType alias for composed lens type\nIso-based Lens optic.\nHelper Iso that converts between A &lt;-&gt; (B, S)\nComposes this IsoLens with another IsoLens to focus deeper …\nReturns the argument unchanged.\nReturns the argument unchanged.\nExtracts the focused part from the structure.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a reference to the underlying Iso.\nApplies a function to the focused part and returns a new …\nCreates a new IsoLens from an Iso implementation.\nCreates a new structure with the focused part replaced by …\nIso-based Prism optic.\nLifts a prism to work with <code>Option</code>s.\nComposes this prism with another prism.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new IsoPrism from an Iso implementation.\nAttempts to extract the focused value from the sum type.\nConstructs the sum type from a focused value.\nA lens is a first-class reference to a subpart of some …\nMaps a function over the focused part, creating a new lens.\nReturns the argument unchanged.\nGets the focused part from the whole structure.\nCalls <code>U::from(self)</code>.\nModifies the focused part using a function, returning a …\nModifies the focused part using a function without …\nCreates a new lens from getter and setter functions.\nSets the focused part to a new value, returning a new …\nSets the focused part to a new value without checking …\nError with a custom message\nContains a value of type <code>T</code>\nA type that represents an optional value, optimized with …\nError type for Maybe operations\nExtension trait for Maybe that provides additional error …\nRepresents the absence of a value\nError raised when attempting to access a value that doesn…\nConverts a <code>Maybe&lt;T&gt;</code> to an <code>Option&lt;&amp;T&gt;</code>.\nmaybe does not store errors, so this function does nothing\nReturns the provided default value if <code>Nothing</code>, or applies …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts from <code>Option&lt;T&gt;</code> to <code>Maybe&lt;T&gt;</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the maybe value is a <code>Just</code> value.\nReturns <code>true</code> if the maybe value is a <code>Nothing</code> value.\nConverts from <code>Maybe&lt;T&gt;</code> to <code>Option&lt;T&gt;</code>.\nConverts a Maybe to a Result with the specified error\nConverts this Maybe to a Result with the specified error.\nConverts this Maybe to a Result with a standard MaybeError.\nProvides a safe unwrapping mechanism that returns a Result\nUnwraps a maybe, yielding the content of a <code>Just</code>.\nUnwraps a maybe, yielding the content of a <code>Just</code>.\nUnwraps a maybe, yielding the content of a <code>Just</code> or a …\nA <code>Prism</code> is an optic that allows focusing on a specific …\nCreates a Prism for a specific case of a sum type. This is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new Prism with the given preview and review …\nAttempts to extract a value of type A from S.\nConstructs a value of type S from A.\nThe Reader monad represents computations that depend on …\nCreates a Reader that returns the environment itself.\nCreates a Reader that returns the environment itself with …\nCreates a Reader with direct access to the environment.\nCreates a Reader that returns a value derived from the …\nSequences two Reader computations, passing the result of …\nCombines two Readers using a binary function.\nMaps a function over the value produced by this Reader.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nModifies the environment before running this Reader.\nCreates a new Reader monad from a function that depends on …\nRuns this Reader with the given environment, returning the …\nA monad that represents stateful computations.\nApplies a state computation containing a function to …\nChains two state computations together.\nRuns the state computation and returns only the final …\nExecutes the state computation with a pure value.\nRuns the state computation and returns only the final …\nMaps a function over the value produced by a state …\nReturns the argument unchanged.\nReturns the current state.\nCalls <code>U::from(self)</code>.\nModifies the state using a function.\nCreates a new State monad.\nLifts a value into the State monad.\nSets the state to a new value.\nRuns the state computation with an initial state.\nRuns the state computation and returns only the value as a …\nRuns the state computation with context and returns only …\nRuns the state computation and returns only the final …\nRuns the state computation with context and returns only …\nRuns the state computation and converts the result to a …\nRuns the state computation with context and returns a …\nIterator over errors in a Validated\nMutable iterator over errors in a Validated\nRepresents an invalid state with multiple errors of type E.\nIterator over a Validated value (0 or 1 item)\nMutable iterator over a Validated value (0 or 1 item)\nRepresents a valid value of type A.\nA validation type that can accumulate multiple errors.\nChains an async validation operation to this Validated.\nCollects an iterator of Validated values into a single …\nCombines errors from two Validated values.\nReturns all errors if this is invalid, or an empty …\nMaps a function over the error values.\nMaps an async function over the error values.\nMaps a function over the error values, taking ownership of …\nMaps an async function over the valid value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts from <code>Option&lt;A&gt;</code> to <code>Validated&lt;E, A&gt;</code> with a provided …\nConverts from <code>Option&lt;A&gt;</code> to <code>Validated&lt;E, A&gt;</code> with a provided …\nConverts from <code>Option&lt;A&gt;</code> to <code>Validated&lt;E, A&gt;</code> with a function …\nConverts from <code>Option&lt;A&gt;</code> to <code>Validated&lt;E, A&gt;</code> with a function …\nConverts from <code>Result&lt;A, E&gt;</code> to <code>Validated&lt;E, A&gt;</code>.\nConverts from <code>Result&lt;A, E&gt;</code> to <code>Validated&lt;E, A&gt;</code>, taking …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new invalid instance with a single error.\nCreates a new invalid instance with multiple errors from a …\nCreates a new invalid instance with multiple errors from a …\nReturns whether this <code>Validated</code> is invalid.\nReturns whether this <code>Validated</code> is valid.\nReturns an iterator over the valid value (0 or 1 item).\nReturns an iterator over all errors if this is invalid, or …\nReturns a mutable iterator over the error(s) (0 or many).\nReturns a mutable iterator over the valid value (0 or 1 …\nCombines multiple Validated values using a function.\nConverts this <code>Validated</code> into a <code>Result</code>.\nConverts this <code>Validated</code> into a <code>Result</code>, taking ownership of …\nUnwraps a valid value or panics.\nUnwraps a valid value or panics.\nUnwraps a valid value or returns a default.\nCreates a new valid instance.\nFirst\nLast\nMax\nMemoize\nThread-safe memoization utility for pure functions.\nMin\nModule: predicate\nProduct\nSum Wrapper\nA lightweight thunk that can be evaluated.\nA simple value wrapper that can be evaluated.\nA wrapper type that forms a semigroup by taking the first …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA wrapper type that forms a semigroup by taking the last …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA wrapper type that forms a semigroup under the maximum …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA wrapper that memoizes (caches) the result of a function.\nA wrapper that memoizes (caches) the result of a function …\nA thread-safe version of Memoize that can be safely shared …\nA wrapper that memoizes (caches) the result of a function …\nCalls the function with the given input, using the cached …\nCalls the function with the given input, using the cached …\nClears the cached result, forcing the next evaluation to …\nClears the cached results, forcing future evaluations to …\nClears the cached result, forcing the next evaluation to …\nClears the cached results, forcing future evaluations to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the cached result, computing it if …\nReturns a reference to the cached result for the given …\nReturns a reference to the cached result, computing it if …\nReturns a reference to the cached result for the given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new memoized function wrapper.\nCreates a new memoized function wrapper for a function …\nCreates a new thread-safe memoized function wrapper.\nCreates a new thread-safe memoized function wrapper for a …\nThread-safe memoizer for pure functions.\nClears all cached values.\nReturns the argument unchanged.\nReturns the cached value for <code>key</code>, or computes and stores …\nCalls <code>U::from(self)</code>.\nCreates a new, empty memoizer.\nA wrapper type that forms a semigroup under the minimum …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn intensional set, defined by a predicate function.\nReturns true if the value satisfies the predicate.\nReturns a predicate which is the set difference of this …\nReturns the argument unchanged.\nReturns a predicate which is the intersection of this …\nCalls <code>U::from(self)</code>.\nReturns a predicate that is the negation of this predicate.\nCreate a new predicate from a closure.\nReturns a predicate which is the union of this predicate …\nA wrapper type that forms a semigroup under multiplication.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA wrapper type that forms a semigroup under addition.\nReturns the argument unchanged.\nReturns the wrapped value, consuming the <code>Sum</code>.\nClones and returns the inner value.\nReturns a reference to the wrapped value.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Sum</code> wrapper around a value.\nA thunk that lazily produces a value when evaluated.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new thunk from a function.\nA simple value container that just returns its wrapped …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new Value wrapper.\nThe Writer monad represents computations that produce a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nExtracts just the log from the Writer, discarding the …\nCreates a new Writer with the given value and log.\nCreates a new Writer with the given value and an empty log.\nExtracts both the value and the log from the Writer.\nCreates a Writer with the given log and the unit value <code>()</code>.\nExtracts just the value from the Writer, discarding the …\nPrelude: Core Functional Data Types\nPrelude: Core Functional Traits\nPrelude: Trait Extensions\nPrelude: Monad Transformers\nPrelude: Utilities &amp; Extension Traits\nPrelude: Wrapper Types\nCache policy implementations.\nTrait for cache policy strategies used by PersistentVector.\nAn iterator over chunks of elements in a persistent vector.\nAn iterator that consumes a persistent vector and yields …\nAn iterator over the elements of a persistent vector.\nCustom memory manager for efficient allocation.\nThe main persistent vector type.\nAn iterator that yields elements in sorted order without …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MemoryManager</code> instance.\nAdvances the iterator and returns the next value.\nAdvances the iterator and returns the next value.\nAdvances the iterator and returns the next chunk.\nAdvances the iterator and returns the next value.\nAdvances the iterator from the back and returns the next …\nAdvances the iterator from the back and returns the next …\nOptimize the memory manager for a given size and access …\nCreates a new <code>PersistentVector</code> with the provided elements.\nReserves chunks in the chunk pool.\nSets the allocation strategy.\nReturns the number of elements remaining in the iterator.\nReturns the number of elements remaining in the iterator.\nReturns the number of chunks remaining in the iterator.\nReturns the number of elements remaining in the iterator.\nReturns memory statistics.\nReturns the allocation strategy.\nMain persistent vector implementation. Persistent Vector …\nA persistent vector implemented using a Relaxed Radix …\nReturns a Vec of references to all elements (for …\nReturns the result of a binary search.\nReturns the cache hit/miss statistics as a tuple (hits, …\nReturns the chunk size used for chunked storage.\nReturns an iterator that yields chunks of elements from …\nConcatenates two vectors, returning a new vector …\nReturns true if the vector contains the given value.\nReturns a new vector with duplicate consecutive elements …\nReturns a new vector with all elements from the provided …\nReturns a new vector containing only elements that match …\nFilters elements in the vector keeping only those that …\nReturns a reference to the first element, or None if empty.\nFlat maps each element in the vector using the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new persistent vector from a slice of elements.\nCreates a new persistent vector from a slice with a custom …\nCreates a new persistent vector from a slice with a custom …\nGet a reference to the element at the specified index.\nReturns a reference to the element at the given index, or …\nGet a reference to the element at the specified index, …\nReturns a new vector with the element inserted at the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the vector contains no elements.\nReturns true if the vector is empty\nReturns an iterator over the elements of the vector.\nReturns a reference to the last element, or None if empty.\nReturns the number of elements in the vector.\nReturns the number of elements in the vector\nReturns a lens focusing on the element at the given index.\nMaps each element in the vector using the given function.\nCreates a new, empty persistent vector.\nCreates a new, empty SmallVec\nMaps elements in parallel using Rayon.\nRemoves the last element from the vector and returns it, …\nReturns the index of the first occurrence of the value, or …\nReturns a new vector with the given element appended to …\nReturns a new SmallVec with the given element appended\nReturns a new vector with the given element appended, …\nReturns a new vector with the element at the given index …\nReturns a new vector resized to the given length, filling …\nReturns a new vector containing only elements that match …\nReturns a new vector with elements in reverse order.\nCreates a slice of this vector, returning a new vector …\nReturns a new vector with elements sorted.\nReturns a new vector with elements sorted by a comparator …\nReturns an iterator that yields elements in sorted order …\nSplits the vector at the given index, returning a pair of …\nConverts this vector to an <code>Arc&lt;PersistentVector&lt;T&gt;&gt;</code> for …\nConverts this persistent vector to a standard <code>Vec</code>.\nConvert to a standard Vec\nReturns a new vector truncated to the given length.\nCreates a new persistent vector containing a single …\nReturns a new SmallVec with the element at the given index …\nReturns a new vector with the element at the given index …\nCreates a new persistent vector with a custom cache policy.\nCreates a new, empty persistent vector with a custom chunk …\nChoice between alternative computations.\nFunction application within a computational context.\nArrow-based computation abstractions.\nMapping over two-type data structures.\nCategorical composition abstractions.\nExtracting values from computational contexts.\nFunction composition utilities.\nFunction mapping in opposite direction.\nDistribution of contexts over structures.\nDivisible contravariant functors.\nTraits for evaluating and processing data. Evaluation …\nReduction of data structures to a single value.\nStructure-preserving mapping over computational contexts.\nHigher-kinded type abstractions for generic programming. …\nIdentity and value extraction traits.\nIsomorphism between types.\nSequential computation with context binding.\nError handling within monadic contexts.\nMonads with zero and plus operations.\nCombinable types with identity elements.\nTransformations between functors.\nProfunctorial abstractions.\nCreation of values in a computational context.\nRepresentable functors.\nCombinable types without identity elements.\nTraversing data structures with effects.\nA trait for types that provide an alternative computation …\nCombines two alternatives, choosing the first success.\nReturns an empty value representing failure for the …\nReturns a value if the condition is true, otherwise …\nRepeats the structure zero or more times, collecting the …\nA trait for applicative functors, which allow function …\nApplies a binary function to two applicative values.\nApplies a function wrapped in the applicative context to a …\nApplies a function to a value, with both wrapped in an …\nLifts a binary function to work with two applicative …\nLifts a binary function to work with two applicative …\nLifts a ternary function to work with three applicative …\nLifts a ternary function to work with three applicative …\nSequences a list of applicative actions, discarding the …\nSequences two applicative actions, keeping only the result …\nSequences a list of applicative actions, discarding the …\nSequences two applicative actions, keeping only the result …\nA trait representing arrows in category theory, which …\nLifts a pure function into an arrow.\nCombines two arrows to process pairs in parallel.\nProcesses the first component of a pair, leaving the …\nProcesses the second component of a pair, leaving the …\nSplits a computation into two parallel paths.\nA bifunctor is a type constructor that takes two type …\nMaps two functions over both type parameters …\nMaps a function over the first type parameter.\nMaps a function over the second type parameter.\nA trait representing a category in category theory.\nComposes two morphisms in the category.\nCreates an identity morphism for the current type.\nA comonad is the categorical dual of a monad, providing …\nDuplicates the context of a comonad.\nExtends a computation over a comonadic context.\nExtracts the value from a comonadic context.\nA trait for composable functions that can be chained …\nApplies multiple transformation functions to a single …\nComposes two functions and returns a new function.\nComposes two functions into a single function.\nComposes multiple functions into a single function.\nComposes two asynchronous functions to create a new …\nComposes two asynchronous functions into a single …\nComposes two fallible functions that return Results.\nComposes a function with a filtering predicate function.\nChains multiple iterator-producing functions into a single …\nComposes two functions that return Options.\nComposes a function returning Option with a function …\nComposes a function with a parallel mapping function using …\nChains multiple functions together and processes their …\nComposes a function with a parallel filtering predicate …\nComposes two functions conditionally based on a predicate.\nComposes two functions conditionally based on a predicate.\nA contravariant functor is a type constructor that allows …\nExtension methods for contravariant functors, providing …\nComposes two contravariant functors, creating a chain of …\nMaps a function that transforms values of type U into …\nContramaps with a function that ignores its input, …\nMaps a function that transforms values of type U into …\nChains contramap operations for convenient method chaining.\nA trait for types that can be evaluated to produce a value.\nExtension trait providing additional utility methods for …\nEvaluates this computation and then another computation …\nEvaluates this computation by consuming it, then feeds the …\nEvaluates this computation and then another computation …\nEvaluates this computation, consumes it, and then another …\nCombines the evaluation of this computation with another.\nCombines the evaluation of this computation with another, …\nEvaluates the computation to produce a concrete value …\nEvaluates the computation to produce a concrete value by …\nEvaluates this computation and returns the result if a …\nEvaluates this computation by consuming it and returns the …\nMaps a function over the result of evaluating this …\nMaps a function over the result of evaluating this …\nMaps a function over the result of evaluating this …\nMaps a function over the result of evaluating this …\nA <code>Foldable</code> type is a data structure that can be “folded…\nExtension methods for the <code>Foldable</code> trait.\nTests whether all elements in the foldable satisfy the …\nTests whether any element in the foldable satisfies the …\nTests whether the foldable contains a specific value.\nFinds the first element in the foldable that satisfies the …\nLeft-associative fold of a structure.\nMaps elements to a monoid and combines them.\nFold a structure into a monoid.\nFolds over a structure with an optional monoidal value.\nRight-associative fold of a structure.\nTests if the structure is empty.\nChecks if the foldable is sorted.\nReturns the number of elements in the foldable structure.\nFinds the maximum element in the foldable.\nFinds the minimum element in the foldable.\nMultiplies all elements in the foldable.\nUses a combining function to reduce the elements of the …\nSums all elements in the foldable.\nConverts a foldable structure to a Vec.\nA trait for functors, which are type constructors that …\nExtension trait for functors providing additional utility …\nTransforms values with a function that might return None, …\nMaps a function over the values in a functor without …\nMaps a function over the values in a functor.\nReplaces all values in the functor with a constant value, …\nReplaces all values in the functor with a constant value.\nTransforms values with a fallible function, handling …\nTransforms values with a fallible function, handling …\nVoid functor - discards the values and replaces them with …\nVoid functor - discards the values and replaces them with …\nA trait for higher-kinded types that have two type …\nThe same HKT but with both type parameters replaced.\nA trait for types that can be treated as higher-kinded …\nA phantom type used to represent a higher-kinded type at …\nThe same HKT but containing type <code>NewType</code> instead of <code>Source</code>.\nThe type contained in this HKT.\nThe second type parameter of this HKT.\nCreates a new <code>HKTType</code> with default values\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMaps a function over the second type parameter.\nMaps a function over the second type parameter, consuming …\nCreates a new <code>HKTType</code>\nA trait for types that represent identity functions in …\nExtension trait providing additional identity-related …\nThe identity function, which returns its input unchanged.\nConsumes self and returns the contained value.\nMaps a function over the value if it exists, or returns a …\nCreates an identity instance containing the given value.\nConsumes self and returns the contained value, if …\nReturns a reference to the contained value, if available.\nReturns a reference to the contained value.\nReturns a reference to the contained value or a provided …\nAn isomorphism created by composing two other isomorphisms.\nThe source type of the isomorphism.\nAn isomorphism that inverts the direction of another …\nA trait representing an isomorphism between two types.\nExtension methods for types that implement <code>Iso</code>.\nAn isomorphism between Result&lt;R, L&gt; and Either&lt;L, R&gt;.\nAn isomorphism between Result&lt;A, E&gt; and Validated&lt;E, A&gt;.\nThe target type of the isomorphism.\nConverts from the target type back to the source type.\nApplies this isomorphism to convert a value of the target …\nApplies this isomorphism to convert a value of the source …\nConverts from the source type to the target type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an inverse isomorphism that swaps the source and …\nCreates a new isomorphism by composing this isomorphism …\nConverts a function that operates on the source type to a …\nConverts a function that operates on the target type to a …\nModifies a value of the source type by applying a function …\nVerifies that this isomorphism satisfies the isomorphism …\nA trait for monads, which are applicative functors that …\nApplies a function that returns a monadic value to the …\nApplies a function that returns a monadic value to the …\nAlias for <code>bind</code> that matches common functional programming …\nOwnership-based variant of <code>flat_map</code>.\nFlattens a nested monad structure.\nFlattens a nested monad structure, consuming the original.\nPerforms a monadic map operation with a simpler function.\nApplies a monadic function to a non-monadic value, with …\nA trait for types that can map their error type to a …\nA trait for monads that can handle errors, extending the …\nThe source type contained in the monad\nHandles an error by applying a function that can recover …\nHandles an error by applying a function that can recover …\nTransforms the error type using the given function.\nTransforms the error type using the given function, …\nCreates a new instance in an error state.\nA trait for monads that can represent a choice between …\nCombines two monads, representing a choice between them.\nCombines two monads, consuming both.\nCreates a monad that represents an empty or failed …\nA Monoid is a Semigroup with an identity element.\nA trait providing extension methods for monoid operations\nUtility function to combine all monoid values with the …\nReturns the identity element of the monoid.\nChecks if this monoid value is equal to the identity …\nCombines a slice of monoid values.\nCreates a monoid that is combined with itself a specified …\nCreates a monoid by repeating an element a specified …\nA <strong>natural transformation</strong> between two functors F and G.\nReturns the identity natural transformation for any …\nTransforms a value of type <code>F::Output&lt;A&gt;</code> into <code>G::Output&lt;A&gt;</code>, …\nTransforms a value by taking ownership.\nA trait for types that can lift values into a …\nExtension trait providing a more ergonomic way to use Pure.\nA zero-cost wrapper for types that implement <code>Pure</code>.\nCombine two values into a new value and lift it into a …\nCreate a default PureType.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLift a value into a context.\nLift another value into a context.\nLift a value into a context, consuming the value.\nCreate a new PureType.\nLift a pair of values into a context.\nLift a value into a context.\nLift a value into a context, consuming the value.\nLift a value into a context.\nLift a value into a context, consuming the value.\nA trait for semigroups, which are algebraic structures …\nExtension methods for semigroups, providing additional …\nAdapter struct to provide extension methods for semigroups.\nCombines two values by reference to produce a new value.\nCombines <code>self</code> with all the values in an iterator.\nCombines <code>self</code> with all the values in an iterator.\nCombines all elements in an iterator into one value, …\nCombines a sequence of semigroup values into a single …\nCombines the semigroup value with itself a specified …\nCombines the semigroup value with itself a specified …\nCombines the semigroup value with itself a specified …\nCombines the semigroup value with itself a specified …\nCombines two values by consuming them to produce a new …\nCombines a sequence of semigroup values, starting with an …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA trait for structures that can be traversed from left to …\nSequences a structure of effects into an effect of …\nSequences a structure of effects with ownership, into an …\nTraverses the structure, applying the given function to …\nTraverses the structure with ownership, applying the given …\nThe type of the base monad.\nTrait for monad transformers.\nContinuation Monad Transformer (ContT)\nLifts a value from a base monad into a monad transformer.\nLifts a value from the base monad into the transformer.\nReader Transformer\nThe State monad transformer, adding stateful computations …\nThe continuation monad transformer: ContT&lt;R, M, A&gt; wraps a …\nType alias for the core continuation transformer function …\nApplies a function wrapped in a <code>ContT</code> context to a value …\nMonadic bind operation for the continuation transformer.\nCall with current continuation.\nMaps a function over the value inside this continuation …\nReturns the argument unchanged.\nConverts a <code>Cont&lt;R, A&gt;</code> into this <code>ContT&lt;R, Id&lt;R&gt;, A&gt;</code>.\nCalls <code>U::from(self)</code>.\nCreates a new continuation transformer from a function.\nLifts a value into the continuation transformer context.\nRuns this continuation transformer with the given …\nConverts this <code>ContT&lt;R, Id&lt;R&gt;, A&gt;</code> into a <code>Cont&lt;R, A&gt;</code>.\nType alias for a function that combines two ReaderT …\nThe <code>ReaderT</code> monad transformer adds environment reading …\nApplies a function from another ReaderT to the values in …\nApplies a function from another ReaderT to the values in …\nCreates a <code>ReaderT</code> that returns the environment itself, …\nCreates a reader that returns a transformed version of the …\nCreates a <code>ReaderT</code> by applying a function to the …\nCreates a reader that returns a part of the environment. …\nBinds this ReaderT with a function that produces another …\nBinds this ReaderT with a function that produces another …\nCombines this ReaderT with another using a binary function.\nCombines this ReaderT with another using a binary function.\nMaps a function over the ReaderT value, producing a new …\nMaps a function over the values inside this ReaderT.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLifts a binary function to work with readers.\nModifies the environment before running a reader …\nMaps a function over the error contained in this ReaderT.\nCreates a new <code>ReaderT</code> transformer.\nLifts a value directly into a ReaderT context.\nRuns the reader transformer with a specific environment.\nRuns the reader transformer and converts errors to …\nRuns the reader transformer with context information for …\nUnwraps this ReaderT to get the base monad value by …\nType alias for a function that combines two state-value …\nA monad transformer that adds state capabilities to a base …\nType alias for a function that transforms a state-value …\nApplies a function inside a StateT to a value inside …\nBinds this StateT with a function that produces another …\nCombines this StateT with another using a binary function.\nRuns the state computation and returns only the final …\nMaps a function over the values inside this StateT.\nReturns the argument unchanged.\nConverts a <code>State&lt;S, A&gt;</code> into a <code>StateT&lt;S, Id&lt;(S, A)&gt;, A&gt;</code>.\nCreates a <code>StateT</code> that returns the current state without …\nCalls <code>U::from(self)</code>.\nJoins a nested StateT structure, flattening it to a single …\nMaps a function over the error contained in this StateT.\nCreates a <code>StateT</code> that modifies the current state with a …\nCreates a new <code>StateT</code> transformer.\nCreates a new <code>StateT</code> transformer with a pure value.\nCreates a <code>StateT</code> that replaces the current state and …\nRuns the state transformer with a specific initial state.\nConverts this <code>StateT&lt;S, Id&lt;(S, A)&gt;, A&gt;</code> into a <code>State&lt;S, A&gt;</code>.\nRuns the state transformer and returns only the value as a …\nRuns the state transformer with context and returns only …\nRuns the state transformer and returns only the final …\nRuns the state transformer and converts errors to AppError …\nRuns the state transformer with context information for …\nError handling utilities for working with functional …\nHigher-kinded type utilities for generic programming.\nData transformation utilities for functional operations.\nA custom error type with optional context.\nThe output type when mapping the error to a new type\nA chainable error handling extension trait.\nThe successful value type\nError handling trait for types that can fail with a …\nMaps both the success and error types.\nReturns a reference to the error context, if any.\nTransforms an Either into a Result.\nCreates an error with a message.\nCreates an error with a message and context.\nMaps a function over the error, transforming the error …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMaps the error message to a new type.\nMaps the error context to a new type.\nReturns a reference to the error message.\nCreates a new error with just a message.\nTransforms a Result into an Either.\nSpecialization of <code>sequence_result</code> for standardizing error …\nConverts a collection of <code>WithError</code> values into a Result.\nConverts a Result to an Either.\nConverts this type to a Result.\nConverts a Result to a Validated.\nSpecialization of <code>traverse_result</code> for standardizing error …\nApplies a function that might fail to each element, …\nReturns the contained value or the default for type T.\nCreates a new error with a message and context.\nComposes multiple transformations into a single function.\nApplies multiple operations to a single input value.\nFilters and maps a collection in a single pass.\nLifts a function to work with <code>Option</code> values.\nMaps a function over a <code>Result</code> value.\nChains a sequence of operations that may return <code>Option&lt;T&gt;</code>.\nChains a sequence of operations that may return …\nConvenience wrapper around <code>pipeline_result</code> with a more …\nCombines elements from two collections using a combining …\nA pipeline for building chains of transformations on …\nExtracts the final value from the pipeline.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMaps a transformation over the inner value, operating by …\nMaps a transformation over the inner value, taking …\nCreates a new pipeline with the given functorial value.\nApplies a transformation to all functorial values in a …\nApplies a transformation to a single optional value.")