(function() {
    var type_impls = Object.fromEntries([["rustica",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-IsoLens%3CS,+A,+L%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rustica/datatypes/iso_lens.rs.html#177\">Source</a><a href=\"#impl-Clone-for-IsoLens%3CS,+A,+L%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>, A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>, L&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"rustica/datatypes/iso_lens/struct.IsoLens.html\" title=\"struct rustica::datatypes::iso_lens::IsoLens\">IsoLens</a>&lt;S, A, L&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"rustica/traits/iso/trait.Iso.html\" title=\"trait rustica::traits::iso::Iso\">Iso</a>&lt;S, A, From = S, To = A&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustica/datatypes/iso_lens.rs.html#177\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"rustica/datatypes/iso_lens/struct.IsoLens.html\" title=\"struct rustica::datatypes::iso_lens::IsoLens\">IsoLens</a>&lt;S, A, L&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#209\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","rustica::datatypes::iso_lens::ComposedIsoLens"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-IsoLens%3CS,+A,+L%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rustica/datatypes/iso_lens.rs.html#177\">Source</a><a href=\"#impl-Debug-for-IsoLens%3CS,+A,+L%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>, A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>, L&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"rustica/datatypes/iso_lens/struct.IsoLens.html\" title=\"struct rustica::datatypes::iso_lens::IsoLens\">IsoLens</a>&lt;S, A, L&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"rustica/traits/iso/trait.Iso.html\" title=\"trait rustica::traits::iso::Iso\">Iso</a>&lt;S, A, From = S, To = A&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustica/datatypes/iso_lens.rs.html#177\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","rustica::datatypes::iso_lens::ComposedIsoLens"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IsoLens%3CS,+A,+L%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rustica/datatypes/iso_lens.rs.html#186-466\">Source</a><a href=\"#impl-IsoLens%3CS,+A,+L%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, A, L&gt; <a class=\"struct\" href=\"rustica/datatypes/iso_lens/struct.IsoLens.html\" title=\"struct rustica::datatypes::iso_lens::IsoLens\">IsoLens</a>&lt;S, A, L&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"rustica/traits/iso/trait.Iso.html\" title=\"trait rustica::traits::iso::Iso\">Iso</a>&lt;S, A, From = S, To = A&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/rustica/datatypes/iso_lens.rs.html#228-233\">Source</a><h4 class=\"code-header\">pub fn <a href=\"rustica/datatypes/iso_lens/struct.IsoLens.html#tymethod.new\" class=\"fn\">new</a>(iso: L) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Creates a new IsoLens from an Iso implementation.</p>\n<h5 id=\"arguments\"><a class=\"doc-anchor\" href=\"#arguments\">§</a>Arguments</h5>\n<ul>\n<li><code>iso</code> - An Iso instance that defines a bidirectional mapping between the structure and its focused part.</li>\n</ul>\n<h5 id=\"returns\"><a class=\"doc-anchor\" href=\"#returns\">§</a>Returns</h5>\n<p>A new IsoLens instance.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rustica::datatypes::iso_lens::IsoLens;\n<span class=\"kw\">use </span>rustica::traits::iso::Iso;\n\n<span class=\"attr\">#[derive(Clone, Debug, PartialEq)]\n</span><span class=\"kw\">struct </span>Person { name: String, age: u32 }\n\n<span class=\"kw\">struct </span>NameIsoLens;\n<span class=\"kw\">impl </span>Iso&lt;Person, (String, Person)&gt; <span class=\"kw\">for </span>NameIsoLens {\n    <span class=\"kw\">type </span>From = Person;\n    <span class=\"kw\">type </span>To = (String, Person);\n    <span class=\"kw\">fn </span>forward(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, from: <span class=\"kw-2\">&amp;</span>Person) -&gt; (String, Person) {\n        (from.name.clone(), from.clone())\n    }\n    <span class=\"kw\">fn </span>backward(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, to: <span class=\"kw-2\">&amp;</span>(String, Person)) -&gt; Person {\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>p = to.<span class=\"number\">1</span>.clone();\n        p.name = to.<span class=\"number\">0</span>.clone();\n        p\n    }\n}\n\n<span class=\"kw\">let </span>lens = IsoLens::new(NameIsoLens);\n<span class=\"kw\">let </span>p = Person { name: <span class=\"string\">\"Alice\"</span>.into(), age: <span class=\"number\">30 </span>};\n<span class=\"macro\">assert_eq!</span>(lens.get(<span class=\"kw-2\">&amp;</span>p), (<span class=\"string\">\"Alice\"</span>.to_string(), p.clone()));\n<span class=\"kw\">let </span>updated = lens.set(<span class=\"kw-2\">&amp;</span>p, <span class=\"kw-2\">&amp;</span>(<span class=\"string\">\"Bob\"</span>.to_string(), p.clone()));\n<span class=\"macro\">assert_eq!</span>(updated.name, <span class=\"string\">\"Bob\"</span>);\n<span class=\"macro\">assert_eq!</span>(updated.age, <span class=\"number\">30</span>); <span class=\"comment\">// Original value preserved</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><a class=\"src rightside\" href=\"src/rustica/datatypes/iso_lens.rs.html#269-274\">Source</a><h4 class=\"code-header\">pub fn <a href=\"rustica/datatypes/iso_lens/struct.IsoLens.html#tymethod.get\" class=\"fn\">get</a>(&amp;self, s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;S</a>) -&gt; A<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Extracts the focused part from the structure.</p>\n<p>This method uses the Iso’s <code>forward</code> mapping to access the field of interest.</p>\n<h5 id=\"arguments-1\"><a class=\"doc-anchor\" href=\"#arguments-1\">§</a>Arguments</h5>\n<ul>\n<li><code>s</code> - A reference to the structure.</li>\n</ul>\n<h5 id=\"returns-1\"><a class=\"doc-anchor\" href=\"#returns-1\">§</a>Returns</h5>\n<p>A clone of the focused part.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>lens = IsoLens::new(NameIsoLens);\n<span class=\"kw\">let </span>p = Person { name: <span class=\"string\">\"Alice\"</span>.into(), age: <span class=\"number\">30 </span>};\n<span class=\"macro\">assert_eq!</span>(lens.get(<span class=\"kw-2\">&amp;</span>p), (<span class=\"string\">\"Alice\"</span>.to_string(), p.clone()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set\" class=\"method\"><a class=\"src rightside\" href=\"src/rustica/datatypes/iso_lens.rs.html#312-318\">Source</a><h4 class=\"code-header\">pub fn <a href=\"rustica/datatypes/iso_lens/struct.IsoLens.html#tymethod.set\" class=\"fn\">set</a>(&amp;self, _s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;S</a>, a: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;A</a>) -&gt; S<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Creates a new structure with the focused part replaced by a new value.</p>\n<p>This method uses the Iso’s <code>backward</code> mapping to update the field of interest in an immutable way.</p>\n<h5 id=\"arguments-2\"><a class=\"doc-anchor\" href=\"#arguments-2\">§</a>Arguments</h5>\n<ul>\n<li><code>s</code> - A reference to the original structure.</li>\n<li><code>a</code> - A reference to the new value for the focused part.</li>\n</ul>\n<h5 id=\"returns-2\"><a class=\"doc-anchor\" href=\"#returns-2\">§</a>Returns</h5>\n<p>A new structure with the updated value.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>lens = IsoLens::new(NameIsoLens);\n<span class=\"kw\">let </span>p = Person { name: <span class=\"string\">\"Alice\"</span>.into(), age: <span class=\"number\">30 </span>};\n<span class=\"kw\">let </span>updated = lens.set(<span class=\"kw-2\">&amp;</span>p, <span class=\"kw-2\">&amp;</span>(<span class=\"string\">\"Bob\"</span>.to_string(), p.clone()));\n<span class=\"macro\">assert_eq!</span>(updated.name, <span class=\"string\">\"Bob\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.modify\" class=\"method\"><a class=\"src rightside\" href=\"src/rustica/datatypes/iso_lens.rs.html#356-364\">Source</a><h4 class=\"code-header\">pub fn <a href=\"rustica/datatypes/iso_lens/struct.IsoLens.html#tymethod.modify\" class=\"fn\">modify</a>&lt;F&gt;(&amp;self, s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;S</a>, f: F) -&gt; S<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;A</a>) -&gt; A,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Applies a function to the focused part and returns a new structure with the modified value.</p>\n<p>This is a composition of <code>get</code> and <code>set</code>, allowing transformation of the field in a functional style.</p>\n<h5 id=\"arguments-3\"><a class=\"doc-anchor\" href=\"#arguments-3\">§</a>Arguments</h5>\n<ul>\n<li><code>s</code> - A reference to the original structure.</li>\n<li><code>f</code> - A function to transform the focused part.</li>\n</ul>\n<h5 id=\"returns-3\"><a class=\"doc-anchor\" href=\"#returns-3\">§</a>Returns</h5>\n<p>A new structure with the transformed value.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>lens = IsoLens::new(NameIsoLens);\n<span class=\"kw\">let </span>p = Person { name: <span class=\"string\">\"Alice\"</span>.into(), age: <span class=\"number\">30 </span>};\n<span class=\"kw\">let </span>modified = lens.modify(<span class=\"kw-2\">&amp;</span>p, |n| (n.<span class=\"number\">0</span>.to_uppercase(), n.<span class=\"number\">1</span>.clone()));\n<span class=\"macro\">assert_eq!</span>(modified.name, <span class=\"string\">\"ALICE\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compose\" class=\"method\"><a class=\"src rightside\" href=\"src/rustica/datatypes/iso_lens.rs.html#416-433\">Source</a><h4 class=\"code-header\">pub fn <a href=\"rustica/datatypes/iso_lens/struct.IsoLens.html#tymethod.compose\" class=\"fn\">compose</a>&lt;B, L2&gt;(\n    self,\n    other: <a class=\"struct\" href=\"rustica/datatypes/iso_lens/struct.IsoLens.html\" title=\"struct rustica::datatypes::iso_lens::IsoLens\">IsoLens</a>&lt;A, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(B, S)</a>, L2&gt;,\n) -&gt; <a class=\"type\" href=\"rustica/datatypes/iso_lens/type.ComposedIsoLens.html\" title=\"type rustica::datatypes::iso_lens::ComposedIsoLens\">ComposedIsoLens</a>&lt;S, A, B, L, L2&gt;<div class=\"where\">where\n    L2: <a class=\"trait\" href=\"rustica/traits/iso/trait.Iso.html\" title=\"trait rustica::traits::iso::Iso\">Iso</a>&lt;A, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(B, S)</a>, From = A, To = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(B, S)</a>&gt;,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Composes this IsoLens with another IsoLens to focus deeper into a nested structure.</p>\n<h5 id=\"type-parameters\"><a class=\"doc-anchor\" href=\"#type-parameters\">§</a>Type Parameters</h5>\n<ul>\n<li><code>B</code> - The type of the deeper focused part</li>\n<li><code>L2</code> - The Iso implementation from <code>A</code> to <code>(B, S)</code></li>\n</ul>\n<h5 id=\"arguments-4\"><a class=\"doc-anchor\" href=\"#arguments-4\">§</a>Arguments</h5>\n<ul>\n<li><code>other</code> - The IsoLens to compose with (must focus from <code>A</code> to <code>(B, S)</code>)</li>\n</ul>\n<h5 id=\"returns-4\"><a class=\"doc-anchor\" href=\"#returns-4\">§</a>Returns</h5>\n<p>A new IsoLens that focuses from <code>S</code> to <code>(B, S)</code>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rustica::datatypes::iso_lens::IsoLens;\n<span class=\"kw\">use </span>rustica::traits::iso::Iso;\n<span class=\"attr\">#[derive(Clone, Debug, PartialEq)]\n</span><span class=\"kw\">struct </span>Inner { value: i32 }\n<span class=\"attr\">#[derive(Clone, Debug, PartialEq)]\n</span><span class=\"kw\">struct </span>Outer { inner: Inner }\n<span class=\"kw\">struct </span>InnerIso;\n<span class=\"kw\">impl </span>Iso&lt;Outer, Inner&gt; <span class=\"kw\">for </span>InnerIso {\n    <span class=\"kw\">type </span>From = Outer;\n    <span class=\"kw\">type </span>To = Inner;\n    <span class=\"kw\">fn </span>forward(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, from: <span class=\"kw-2\">&amp;</span>Outer) -&gt; Inner {\n        from.inner.clone()\n    }\n    <span class=\"kw\">fn </span>backward(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, to: <span class=\"kw-2\">&amp;</span>Inner) -&gt; Outer {\n        Outer { inner: to.clone() }\n    }\n}\n<span class=\"kw\">struct </span>ValuePairIso;\n<span class=\"kw\">impl </span>Iso&lt;Inner, (i32, Outer)&gt; <span class=\"kw\">for </span>ValuePairIso {\n    <span class=\"kw\">type </span>From = Inner;\n    <span class=\"kw\">type </span>To = (i32, Outer);\n    <span class=\"kw\">fn </span>forward(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, from: <span class=\"kw-2\">&amp;</span>Inner) -&gt; (i32, Outer) {\n        (from.value, Outer { inner: from.clone() })\n    }\n    <span class=\"kw\">fn </span>backward(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, to: <span class=\"kw-2\">&amp;</span>(i32, Outer)) -&gt; Inner {\n        Inner { value: to.<span class=\"number\">0 </span>}\n    }\n}\n<span class=\"kw\">let </span>outer_lens = IsoLens::new(InnerIso);\n<span class=\"kw\">let </span>value_pair_lens = IsoLens::new(ValuePairIso);\n<span class=\"kw\">let </span>composed = outer_lens.compose(value_pair_lens);\n<span class=\"kw\">let </span>o = Outer { inner: Inner { value: <span class=\"number\">42 </span>} };\n<span class=\"macro\">assert_eq!</span>(composed.get(<span class=\"kw-2\">&amp;</span>o).<span class=\"number\">0</span>, <span class=\"number\">42</span>);\n<span class=\"kw\">let </span>updated = composed.set(<span class=\"kw-2\">&amp;</span>o, <span class=\"kw-2\">&amp;</span>(<span class=\"number\">100</span>, Outer { inner: Inner { value: <span class=\"number\">100 </span>} }));\n<span class=\"macro\">assert_eq!</span>(updated.inner.value, <span class=\"number\">100</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iso_ref\" class=\"method\"><a class=\"src rightside\" href=\"src/rustica/datatypes/iso_lens.rs.html#463-465\">Source</a><h4 class=\"code-header\">pub fn <a href=\"rustica/datatypes/iso_lens/struct.IsoLens.html#tymethod.iso_ref\" class=\"fn\">iso_ref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;L</a></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the underlying Iso.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rustica::datatypes::iso_lens::IsoLens;\n<span class=\"kw\">use </span>rustica::traits::iso::Iso;\n<span class=\"attr\">#[derive(Clone, Debug, PartialEq)]\n</span><span class=\"kw\">struct </span>Person { name: String, age: u32 }\n<span class=\"kw\">struct </span>NameIso;\n<span class=\"kw\">impl </span>Iso&lt;Person, (String, Person)&gt; <span class=\"kw\">for </span>NameIso {\n    <span class=\"kw\">type </span>From = Person;\n    <span class=\"kw\">type </span>To = (String, Person);\n    <span class=\"kw\">fn </span>forward(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, from: <span class=\"kw-2\">&amp;</span>Person) -&gt; (String, Person) {\n        (from.name.clone(), from.clone())\n    }\n    <span class=\"kw\">fn </span>backward(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, to: <span class=\"kw-2\">&amp;</span>(String, Person)) -&gt; Person {\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>p = to.<span class=\"number\">1</span>.clone();\n        p.name = to.<span class=\"number\">0</span>.clone();\n        p\n    }\n}\n<span class=\"kw\">let </span>lens = IsoLens::new(NameIso);\n<span class=\"kw\">let </span>iso = lens.iso_ref();\n<span class=\"kw\">let </span>p = Person { name: <span class=\"string\">\"Alice\"</span>.to_string(), age: <span class=\"number\">30 </span>};\n<span class=\"kw\">let </span>(name, <span class=\"kw\">_</span>) = iso.forward(<span class=\"kw-2\">&amp;</span>p);\n<span class=\"macro\">assert_eq!</span>(name, <span class=\"string\">\"Alice\"</span>);</code></pre></div>\n</div></details></div></details>",0,"rustica::datatypes::iso_lens::ComposedIsoLens"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-IsoLens%3CS,+A,+L%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rustica/datatypes/iso_lens.rs.html#177\">Source</a><a href=\"#impl-PartialEq-for-IsoLens%3CS,+A,+L%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>, A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>, L&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"rustica/datatypes/iso_lens/struct.IsoLens.html\" title=\"struct rustica::datatypes::iso_lens::IsoLens\">IsoLens</a>&lt;S, A, L&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"rustica/traits/iso/trait.Iso.html\" title=\"trait rustica::traits::iso::Iso\">Iso</a>&lt;S, A, From = S, To = A&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustica/datatypes/iso_lens.rs.html#177\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"rustica/datatypes/iso_lens/struct.IsoLens.html\" title=\"struct rustica::datatypes::iso_lens::IsoLens\">IsoLens</a>&lt;S, A, L&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","rustica::datatypes::iso_lens::ComposedIsoLens"],["<section id=\"impl-StructuralPartialEq-for-IsoLens%3CS,+A,+L%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rustica/datatypes/iso_lens.rs.html#177\">Source</a><a href=\"#impl-StructuralPartialEq-for-IsoLens%3CS,+A,+L%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, A, L&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"rustica/datatypes/iso_lens/struct.IsoLens.html\" title=\"struct rustica::datatypes::iso_lens::IsoLens\">IsoLens</a>&lt;S, A, L&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"rustica/traits/iso/trait.Iso.html\" title=\"trait rustica::traits::iso::Iso\">Iso</a>&lt;S, A, From = S, To = A&gt;,</div></h3></section>","StructuralPartialEq","rustica::datatypes::iso_lens::ComposedIsoLens"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[26727]}