name: Publish to crates.io

on:
  push:
    tags:
      - 'v*'

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Check crate version
        id: check-version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          CARGO_VERSION=$(grep "^version" Cargo.toml | head -n 1 | cut -d'"' -f2)
          echo "Tagged version: $VERSION, Cargo.toml version: $CARGO_VERSION"
          if [ "$VERSION" != "$CARGO_VERSION" ]; then
            echo "::error::Version mismatch: Tag version ($VERSION) does not match Cargo.toml version ($CARGO_VERSION)"
            exit 1
          fi
      
      - name: Verify package
        run: cargo package --no-verify
      
      - name: Run tests
        run: cargo test --features=full
  
  publish:
    needs: [validate]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Check if already published
        id: check-published
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          if cargo search rustica | grep -q "rustica = \"$VERSION\""; then
            echo "Version $VERSION already published"
            echo "already_published=true" >> $GITHUB_OUTPUT
          else
            echo "Version $VERSION not published yet"
            echo "already_published=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Publish
        if: steps.check-published.outputs.already_published != 'true'
        uses: katyo/publish-crates@v2
        with:
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          args: --no-verify
      
      - name: Notify on success
        if: github.event_name == 'pull_request' || github.event_name == 'issues' && success() && steps.check-published.outputs.already_published != 'true'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `âœ… Successfully published to crates.io!`
            })