name: Rust CI & Docs & Pages

on:
  push:
    branches: [main, develop]
    tags:
      - 'v*'
  pull_request:

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}
      - name: Check formatting
        run: cargo fmt --all -- --check
      - name: Clippy
        run: cargo clippy --all-features -- -D warnings
      - name: Build
        run: cargo build --release --all-features
      - name: Run tests
        run: cargo test --release --all-features

  build-docs:
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}
      - name: Build docs
        run: cargo doc --all-features --no-deps

  security-audit:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install cargo-audit
        run: cargo install cargo-audit
      - name: Run security audit
        run: cargo audit

  publish:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Check crate version
        id: check-version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          CARGO_VERSION=$(grep "^version" Cargo.toml | head -n 1 | cut -d'"' -f2)
          echo "Tagged version: $VERSION, Cargo.toml version: $CARGO_VERSION"
          if [ "$VERSION" != "$CARGO_VERSION" ]; then
            echo "::error::Version mismatch: Tag version ($VERSION) does not match Cargo.toml version ($CARGO_VERSION)"
            exit 1
          fi
      - name: Verify package
        run: cargo package --no-verify
      - name: Run tests
        run: cargo test --features=full
      - name: Check if already published
        id: check-published
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          if cargo search rustica | grep -q "rustica = \"$VERSION\""; then
            echo "Version $VERSION already published"
            echo "already_published=true" >> $GITHUB_OUTPUT
          else
            echo "Version $VERSION not published yet"
            echo "already_published=false" >> $GITHUB_OUTPUT
          fi
      - name: Publish
        if: steps.check-published.outputs.already_published != 'true'
        uses: katyo/publish-crates@v2
        with:
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          args: --no-verify
      - name: Notify on success
        if: github.event_name == 'pull_request' || github.event_name == 'issues'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `âœ… Successfully published to crates.io!`
            })

  create-release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [publish]
    runs-on: ubuntu-latest
    steps:
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            Automated release for ${{ github.ref_name }}.
            See CHANGELOG.md for details.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  readme-to-index:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install markdown dependency
        run: python3 -m pip install markdown
      - name: Extract README sections and generate index.html
        run: |
          python3 .github/scripts/readme_to_index.py README.md index.html
      - name: Upload index.html as artifact (for preview or deploy)
        uses: actions/upload-artifact@v4
        with:
          name: index-html
          path: index.html

  copy-readme-to-gh-pages:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Checkout gh-pages branch
        run: |
          git fetch origin gh-pages:gh-pages
          git checkout gh-pages
      - name: Copy README.md from main
        run: |
          git checkout main -- README.md
      - name: Commit and push README.md to gh-pages
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add README.md
          git commit -m "docs: update README.md from main branch [ci skip]" || echo "No changes to commit"
          git push origin gh-pages

  deploy-docs-to-gh-pages:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Build docs
        run: cargo doc --all-features --no-deps
      - name: Checkout gh-pages branch
        run: |
          git fetch origin gh-pages:gh-pages
          git checkout gh-pages
      - name: Copy docs to gh-pages
        run: |
          rm -rf doc/rustica
          mkdir -p doc
          cp -r target/doc doc/rustica
      - name: Commit and push docs to gh-pages
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add doc/rustica
          git commit -m "docs: update API docs for ${{ github.ref_name }} [ci skip]" || echo "No changes to commit"
          git push origin gh-pages