name: Rust CI & Docs & Pages

on:
  push:
    branches: [main, develop]
    tags:
      - 'v*'
  pull_request:
  schedule:
    - cron: 0 0 * * *

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain: [stable, beta, nightly]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          override: true
          components: rustfmt, clippy
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-rust-${{ matrix.toolchain }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-rust-${{ matrix.toolchain }}-
            ${{ runner.os }}-rust-
      - name: Check formatting
        run: cargo fmt --all -- --check
      - name: Clippy
        run: cargo clippy --all-features -- -D warnings
      - name: Build
        run: cargo build --release --all-features
      - name: Install cargo-tarpaulin
        if: matrix.toolchain == 'stable'
        run: cargo install cargo-tarpaulin
      - name: Generate coverage report (HTML)
        if: matrix.toolchain == 'stable'
        run: cargo tarpaulin --all-features --out Html --output-dir tarpaulin-report --timeout 120
      - name: List coverage report files
        if: matrix.toolchain == 'stable'
        run: ls -l tarpaulin-report
      - name: Deploy coverage report to gh-pages
        if: matrix.toolchain == 'stable' && github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./tarpaulin-report
          destination_dir: coverage
          keep_files: true
      - name: Run tests
        if: matrix.toolchain != 'stable'
        run: cargo test --release --all-features
      - name: Install cargo-outdated
        run: cargo install cargo-outdated
      - name: Check outdated dependencies
        run: cargo outdated --exit-code 1 || true

  build-docs:
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-rust-
      - name: Build docs
        run: cargo doc --all-features --no-deps
      - name: Install cargo-deadlinks
        run: cargo install cargo-deadlinks
      - name: Check docs for broken links
        run: cargo deadlinks --dir target/doc

  msrv:
    name: Minimal Supported Rust Version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust (MSRV)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.81.0
          override: true
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-rust-msrv-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-rust-msrv-
      - name: Build with MSRV
        run: cargo build --all-features
      - name: Test with MSRV
        run: cargo test --all-features

  security-audit:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - name: Install cargo-audit
        run: cargo install cargo-audit
      - name: Run security audit
        run: cargo audit

  publish:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - name: Check crate version
        id: check-version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          CARGO_VERSION=$(grep "^version" Cargo.toml | head -n 1 | cut -d'"' -f2)
          echo "Tagged version: $VERSION, Cargo.toml version: $CARGO_VERSION"
          if [ "$VERSION" != "$CARGO_VERSION" ]; then
            echo "::error::Version mismatch: Tag version ($VERSION) does not match Cargo.toml version ($CARGO_VERSION)"
            exit 1
          fi
      - name: Verify package
        run: cargo package --no-verify
      - name: Run tests
        run: cargo test --features=full
      - name: Check if already published
        id: check-published
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          if cargo search rustica | grep -q "rustica = \"$VERSION\""; then
            echo "Version $VERSION already published"
            echo "already_published=true" >> $GITHUB_OUTPUT
          else
            echo "Version $VERSION not published yet"
            echo "already_published=false" >> $GITHUB_OUTPUT
          fi
      - name: Install cargo-release
        run: cargo install cargo-release
      - name: Dry-run cargo-release
        run: cargo release minor --dry-run
      - name: Publish
        if: steps.check-published.outputs.already_published != 'true'
        uses: katyo/publish-crates@v2
        with:
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          args: --no-verify
      - name: Notify on success
        if: github.event_name == 'pull_request' || github.event_name == 'issues'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `âœ… Successfully published to crates.io!`
            })

  create-release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [publish]
    runs-on: ubuntu-latest
    steps:
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            Automated release for ${{ github.ref_name }}.
            See CHANGELOG.md for details.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  copy-readme-to-gh-pages:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Checkout gh-pages branch
        run: |
          git fetch origin gh-pages:gh-pages
          git checkout gh-pages
      - name: Copy README.md from main
        run: |
          git checkout main -- README.md
      - name: Commit and push README.md to gh-pages
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add README.md
          git commit -m "docs: update README.md from main branch [ci skip]" || echo "No changes to commit"
          git push origin gh-pages

  benchmark:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') || github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Run all benchmarks
        run: cargo bench -- --output-format bencher | tee output.txt
      - name: Store and publish benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Criterion Benchmark
          tool: 'cargo'
          output-file-path: output.txt
          github-token: ${{ secrets.GITHUB_TOKEN }}
          gh-pages-branch: gh-pages
          benchmark-data-dir-path: benchmark
          auto-push: true
          alert-threshold: '200%'
          fail-on-alert: true
          comment-on-alert: true