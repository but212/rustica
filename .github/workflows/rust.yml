name: Rust CI

on:
  push:
    branches: [main, develop]
    tags:
      - 'v*'
  pull_request:
  schedule:
    - cron: '0 0 * * 0'  # Weekly dependency check

env:
  CARGO_TERM_COLOR: always
  RUST_VERSION: '1.87.0' # MSRV
  RUSTFLAGS: "-D warnings"
  CARGO_INCREMENTAL: 0

permissions:
  contents: read

jobs:
  lint:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2

      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - name: Run Clippy (Edition 2024)
        run: |
          cargo clippy --all-targets --all-features -- \
            -D warnings \
            -A clippy::upper_case_acronyms \
            -W clippy::rust_2024_compatibility \
            -W clippy::uninlined_format_args \
            -W clippy::redundant_pub_crate \
            -W clippy::manual_let_else \
            -W clippy::needless_raw_string_hashes

  test:
    name: Test ${{ matrix.rust }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        rust: [1.87.0, stable, nightly]
        os: [ubuntu-latest, windows-latest, macos-latest]
        features: ["", "--all-features"]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust ${{ matrix.rust }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      - uses: Swatinem/rust-cache@v2
      - name: Run tests
        run: cargo test ${{ matrix.features }} --verbose

  msrv:
    name: Check MSRV (1.87.0)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust ${{ env.RUST_VERSION }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}
      - uses: Swatinem/rust-cache@v2
      - name: Check MSRV compatibility
        run: cargo check --all-features

  unused_dependencies:
    name: Check for unused dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly
      - uses: Swatinem/rust-cache@v2
      - name: Install cargo-udeps
        run: cargo install cargo-udeps --locked
      - name: Run cargo-udeps
        run: cargo +nightly udeps --all-targets --all-features

  semver_check:
    name: Semantic Versioning Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Install cargo-semver-checks
        run: cargo install cargo-semver-checks --locked
      - name: Run semver checks
        run: cargo semver-checks --baseline-rev=main

  security_audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Install cargo-audit
        run: cargo install cargo-audit --locked
      - name: Run security audit
        run: cargo audit --deny warnings
      - name: Install cargo-deny
        run: cargo install cargo-deny --locked
      - name: Run cargo-deny
        run: cargo deny check

  edition_2024_migration:
    name: Edition 2024 Migration Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - name: Check Edition 2024 migration
        run: |
          cargo +nightly fix --edition --allow-dirty --all-features || true
          cargo +nightly check --all-features
      - name: Check for Edition 2024 idioms
        run: |
          cargo +nightly clippy --all-features -- \
            -W clippy::rust_2024_compatibility \
            -W clippy::edition_2024_idioms

  docs:
    name: Build Docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      
      - name: Install nightly toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rust-docs
      
      - uses: Swatinem/rust-cache@v2
      
      - name: Build documentation
        run: cargo +nightly doc --all-features --no-deps
        env:
          RUSTDOCFLAGS: "-D warnings -D rustdoc::broken_intra_doc_links --cfg docsrs"
      
      - name: Check for broken intra-doc links
        run: |
          RUSTDOCFLAGS="-D warnings -D rustdoc::broken_intra_doc_links" \
          cargo +nightly doc --all-features --no-deps
      
      - name: Verify docs directory exists
        run: |
          if [ ! -d "./target/doc" ]; then
            echo "::error::Documentation build failed: target/doc directory not found"
            exit 1
          fi
      
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main' && success()
        uses: peaceiris/actions-gh-pages@v4.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          destination_dir: docs
          force_orphan: false
          keep_files: true
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: 'docs: update API documentation [skip ci]'

  no_std_check:
    name: No-std compatibility check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: thumbv7em-none-eabihf
      - uses: Swatinem/rust-cache@v2
      - name: Check no-std compatibility
        run: |
          cargo check --target thumbv7em-none-eabihf --no-default-features
          cargo check --target thumbv7em-none-eabihf --no-default-features --features pvec

  publish:
    name: Publish to crates.io
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test, msrv, security_audit, docs, lint, semver_check, edition_2024_migration]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - uses: Swatinem/rust-cache@v2
      
      - name: Check version match
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          CARGO_VERSION=$(grep -m 1 '^version =' Cargo.toml | cut -d'"' -f2)
          if [ "$TAG_VERSION" != "$CARGO_VERSION" ]; then
            echo "::error::Version mismatch: Tag version ($TAG_VERSION) does not match Cargo.toml version ($CARGO_VERSION)"
            exit 1
          fi
      
      - name: Check changelog update
        run: |
          CARGO_VERSION=$(grep -m 1 '^version =' Cargo.toml | cut -d'"' -f2)
          grep -q "$CARGO_VERSION" CHANGELOG.md || (echo "::error::No entry for version $CARGO_VERSION in CHANGELOG.md" && exit 1)
      
      - name: Verify Edition 2024 in Cargo.toml
        run: |
          grep -q 'edition = "2024"' Cargo.toml || (echo "::error::Edition 2024 not found in Cargo.toml" && exit 1)
      
      - name: Add token mask
        run: |
          echo "::add-mask::${{ secrets.CARGO_REGISTRY_TOKEN }}"
      
      - name: Publish to crates.io
        uses: katyo/publish-crates@v2
        with:
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          args: --no-verify

  release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [publish]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      
      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        
      - name: Extract version section from CHANGELOG.md
        id: extract_changelog
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          SECTION=$(awk -v version="$VERSION" '
            /^## \[.*\]/ { 
              if (found) exit;
              if ($0 ~ "^## \\[" version "\\]") found=1;
            } 
            found {print}
          ' CHANGELOG.md)
          BODY=$(echo "$SECTION" | tail -n +2 | sed -e "/^## \[/{N;d;}" -e 's/^/\n/')
          if [ -z "$BODY" ]; then
            BODY="No changelog entry found for version $VERSION"
          fi
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
    
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          body: ${{ steps.extract_changelog.outputs.body }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  benchmark:
    name: Performance Benchmarks
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'schedule'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - uses: Swatinem/rust-cache@v2
      
      - name: Install criterion
        run: cargo install cargo-criterion --locked
      
      - name: Run benchmarks
        run: |
          cargo criterion --all-features --message-format=json > benchmark_raw_results.json || true
          
      - name: Process benchmark results
        run: |
          if [ -f benchmark_raw_results.json ]; then
            jq -r '.[] | select(.reason == "benchmark-complete") | {
              "name": .id,
              "value": .median,
              "unit": "ns/iter"
            }' benchmark_raw_results.json > formatted_benchmark_results.json
          else
            echo "[]" > formatted_benchmark_results.json
          fi
      
      - name: Upload benchmark results
        if: matrix.os == 'ubuntu-latest'
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Rust Benchmarks
          tool: 'customSmallerIsBetter'
          output-file-path: formatted_benchmark_results.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: false
          comment-on-alert: true
          alert-threshold: '120%'
          fail-on-alert: false
          alert-comment-cc-users: '@but212'