name: Rust CI

on:
  push:
    branches: [main, develop]
    tags:
      - 'v*'
  pull_request:
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sundays

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"
  CARGO_INCREMENTAL: 0

permissions:
  contents: read

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta, nightly]
        features: ["", "--all-features"]
      fail-fast: false
    
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      
      - name: Install Rust ${{ matrix.rust }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy
      
      - uses: Swatinem/rust-cache@v2
      
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - name: Run clippy
        run: cargo clippy ${{ matrix.features }} -- -D warnings
      
      - name: Run tests
        run: cargo test ${{ matrix.features }}
      
      - name: Check for outdated dependencies
        if: matrix.rust == 'stable' && matrix.features == '--all-features'
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-outdated
      
      - run: cargo outdated --exit-code 1 || echo "::warning::Outdated dependencies found"
        if: matrix.rust == 'stable' && matrix.features == '--all-features'

  msrv:
    name: Check MSRV
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      
      - name: Extract MSRV
        id: msrv
        run: |
          # Extract version from package.metadata.msrv
          MSRV=$(grep -A 1 "\[package.metadata\]" Cargo.toml | grep -m 1 "msrv" | cut -d '"' -f 2)
          if [ -z "$MSRV" ]; then
            MSRV="1.81.0"
          fi
          echo "msrv=$MSRV" >> $GITHUB_OUTPUT
          echo "Using MSRV: $MSRV"
      
      - name: Install Rust ${{ steps.msrv.outputs.msrv }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.msrv.outputs.msrv }}
      
      - uses: Swatinem/rust-cache@v2
      
      - name: Check MSRV compatibility
        run: cargo check --all-features

  security:
    name: Security audit
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-deny,cargo-audit
      
      - name: Run cargo-deny
        run: cargo deny check
      
      - name: Run cargo-audit
        run: cargo audit

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: [test]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      
      - name: Install nightly toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rust-docs
      
      - uses: Swatinem/rust-cache@v2
      
      - name: Build documentation
        run: cargo +nightly doc --all-features --no-deps
      
      - name: Check for broken intra-doc links
        run: RUSTDOCFLAGS="-D warnings -D rustdoc::broken_intra_doc_links" cargo +nightly doc --all-features --no-deps
      
      - name: Verify docs directory exists
        run: |
          if [ ! -d "./target/doc" ]; then
            echo "::error::Documentation build failed: target/doc directory not found"
            exit 1
          fi
      
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main' && success()
        uses: peaceiris/actions-gh-pages@v4.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          force_orphan: false
          keep_files: true
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: 'docs: update API documentation [skip ci]'

  publish:
    name: Publish to crates.io
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test, msrv, security, docs]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Check version match
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          CARGO_VERSION=$(grep -m 1 '^version =' Cargo.toml | cut -d'"' -f2)
          if [ "$TAG_VERSION" != "$CARGO_VERSION" ]; then
            echo "::error::Version mismatch: Tag version ($TAG_VERSION) does not match Cargo.toml version ($CARGO_VERSION)"
            exit 1
          fi
      
      - name: Check changelog update
        run: |
          CARGO_VERSION=$(grep -m 1 '^version =' Cargo.toml | cut -d'"' -f2)
          grep -q "$CARGO_VERSION" CHANGELOG.md || (echo "::error::No entry for version $CARGO_VERSION in CHANGELOG.md" && exit 1)
      
      - name: Add token mask
        run: |
          echo "::add-mask::${{ secrets.CARGO_REGISTRY_TOKEN }}"
      
      - name: Publish to crates.io
        uses: katyo/publish-crates@v2
        with:
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          args: --no-verify

  release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [publish]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      
      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: "Release v${{ steps.get_version.outputs.version }}"
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt, clippy
      
      - uses: Swatinem/rust-cache@v2
      
      - name: Check benchmark directory exists
        run: |
          mkdir -p target/criterion
      
      - name: Run benchmarks
        run: |
          cargo install cargo-criterion
          cargo criterion --all-features --message-format=json | tee benchmark_results.json
      
      - name: Validate benchmark results
        run: |
          if [ ! -s benchmark_results.json ]; then
            echo "::warning::Benchmark results are empty or failed to generate"
            exit 1
          fi
      
      - name: Upload benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Rust Benchmarks
          tool: 'cargo-criterion'
          output-file-path: benchmark_results.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: false
          comment-on-alert: true
          alert-threshold: '120%'
          fail-on-alert: true
          alert-comment-cc-users: '@but212,@security-team'
          external-data-json-path: 'target/criterion/**/*.json'
      
      - name: Review benchmark results
        run: |
          echo "Benchmark results are available for review"
          echo "Please check the results before publishing"
      
      - name: Publish benchmark results to GitHub Pages
        if: success() && github.event_name != 'pull_request'
        uses: peaceiris/actions-gh-pages@v4.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/criterion
          destination_dir: criterion
          keep_files: true
          force_orphan: false
